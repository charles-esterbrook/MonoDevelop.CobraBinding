use System.Diagnostics
use System.Text.RegularExpressions
use System.Xml
use System.CodeDom.Compiler

use MonoDevelop.Core
use MonoDevelop.Projects

use MonoDevelop.CobraBinding.Project

namespace MonoDevelop.CobraBinding

class CobraLanguageBinding implements IDotNetLanguageBinding

	test
		binding = CobraLanguageBinding()
		assert binding.language == "Cobra"
		assert binding.singleLineCommentTag == "#"
		assert binding.blockCommentStartTag == "/#"
		assert binding.blockCommentEndTag == "#/"
		assert binding.projectStockIcon == "md-project" #TODO: create a custom icon
		assert ClrVersion.Net_2_0 in binding.getSupportedClrVersions
		assert ClrVersion.Net_4_0 in binding.getSupportedClrVersions
		assert binding.getFileName("test") == "test.cobra"
		assert binding.isSourceCodeFile(FilePath("test.cobra"))
		assert not binding.isSourceCodeFile(FilePath("test.cs"))
				
	shared
		var supportedClrVersions as ClrVersion[] = @[ ClrVersion.Net_2_0, ClrVersion.Net_4_0 ]
		var languageName = "Cobra"
		var sourceFileExtension = ".cobra"
		
	var _isWindows as bool
	var _targetArgs as Dictionary<of CompileTarget, String>
	
	cue init
		base.init
		_isWindows = Environment.osVersion.toString.startsWith("Microsoft Windows")
		_targetArgs = {
			CompileTarget.Exe : " -target:exe",
			CompileTarget.Library : " -target:lib",
			CompileTarget.WinExe : " -target:winexe",
			CompileTarget.Module : " -target:module"
		}
	
	get language as String
		return CobraLanguageBinding.languageName
		
	get singleLineCommentTag as String
		return "#"
		
	get blockCommentStartTag as String
		return "/#"
		
	get blockCommentEndTag as String
		return "#/"
	
	get projectStockIcon as String
		return "md-project"
		
	def getSupportedClrVersions as ClrVersion[]
		return CobraLanguageBinding.supportedClrVersions
					
	def getFileName(fileNameWithoutExtension as FilePath) as FilePath
		return fileNameWithoutExtension.changeExtension(CobraLanguageBinding.sourceFileExtension)
		
	def getFileName(fileNameWithoutExtension as String) as String
		return .getFileName(FilePath(fileNameWithoutExtension)).toString
		
	def isSourceCodeFile(fileName as FilePath) as bool
		return fileName.extension == CobraLanguageBinding.sourceFileExtension
		
	def compile(items as ProjectItemCollection, configuration as DotNetProjectConfiguration,
				configSelector as ConfigurationSelector, monitor as IProgressMonitor) as BuildResult
		test
			pass
		body
			argsBuilder = StringBuilder("-compile")

			# references (add each one only once)
			refs = HashSet<of String>()
			pkgs = HashSet<of String>()
			
			/#
			Workaround an issue where some System.Core types from .NET 4.0 cannot
			be resolved without an explicit reference.  The irony is that HashSet
			is one of those that cannot be resolved :)
			
			This issue seems to only exist on Mono. We shouldn't check to see if
			we should only include this workaround on non-Windows systems because
			you can also use the Mono runtime on Windows.
			#/
			refs.add("System.Core")
			argsBuilder.append(" -ref:System.Core")

			for projRef in items.getAll<of ProjectReference>
				branch projRef.referenceType
					on ReferenceType.Package
						if pkgs.add(projRef.package.name)
							argsBuilder.append(' -pkg:"[projRef.package.name]"')
					else
						for fileName in projRef.getReferencedFileNames(configSelector)
							if refs.add(fileName)
								argsBuilder.append(' -ref:"[fileName]"')

			# what kind of assembly will we generate?
			argsBuilder.append(_targetArgs[configuration.compileTarget])
			
			# are we targetting a specific platform?
			if configuration.platform <> nil and configuration.platform.length > 0
				argsBuilder.append(" -clr-platform:[configuration.platform]")

			# what will we call the generated assembly?
			asmName = configuration.compiledOutputName
			argsBuilder.append(' -out:"[asmName.fullPath]"')

			# which files should we compile and which ones should we embed as resources?
			toCompile = StringBuilder()
			nativeArgsBuilder = StringBuilder()
			
			for projFile in items.getAll<of ProjectFile>
				branch projFile.buildAction
					on BuildAction.compile
						toCompile.append(' "[projFile.name]"')
					on BuildAction.embeddedResource
						#TODO: Figure out how to specify the resource name on Windows
						if _isWindows
							nativeArgsBuilder.append('-res:\\"[projFile.name]\\" ')
						else
							nativeArgsBuilder.append('-res:\\"[projFile.name],[projFile.resourceId]\\" ')
			
			compilerParams = configuration.compilationParameters to CobraCompilerParameters
			nativeArgs = nativeArgsBuilder.toString.trimEnd
			
			if nativeArgs.length
				if compilerParams.nativeCompilerArgs.length
					# native compiler args have already been specified, combine them
					compilerParams.nativeCompilerArgs += " [nativeArgs]"
				else
					argsBuilder.append(' -native-compiler-args:"[nativeArgs]"')
			
			if not compilerParams.embedRunTime
				argsBuilder.append(" -copy-core")
			
			# add the user specified compiler parameters for this configuration
			argsBuilder.append(compilerParams.createCmdLineArgs)
			
			# add the list of files to compile
			argsBuilder.append(toCompile.toString)

			# create and setup the process which will execute the Cobra compiler
			# if the user has specified the location of the compiler, use that
			cobraExe = Environment.getEnvironmentVariable("COBRA_EXE")
			
			if cobraExe is nil or cobraExe.length == 0
				# the user has not specified the location of the compiler
				# we'll rely on cobra being in the user's path
				cobraExe = "cobra"

			# use the project directory as the working directory unless it's not defined
			try
				workingDir = configuration.parentItem.baseDirectory.toString
			catch
				workingDir = "."
				
			proc = _spawnCobraCompilerProcess(cobraExe to !, argsBuilder.toString, workingDir)

			# parse the compiler output
			lines = List<of String>()
			lines.addRange(proc.standardError.readToEnd.split('\n'))
			stdOut = proc.standardOutput.readToEnd
			lines.addRange(stdOut.split('\n'))
			
			buildResult = _parseCompilerOutput(lines)
			buildResult.compilerOutput = stdOut
			return buildResult
	
	def _spawnCobraCompilerProcess(cobraExe as String, cobraArgs as String, workingDir as String) as Process
		"""
		Executes the Cobra compiler.  Returns a Process object whose standard output and standard
		error streams can be read for later parsing.
		"""
		require
			cobraExe.length > 0
			workingDir.length > 0
		test
			binding = CobraLanguageBinding()
			
			expect Exception
				binding._spawnCobraCompilerProcess("", "", "")
				
			p = binding._spawnCobraCompilerProcess("cobra", "-version", ".")
			assert p.standardOutput.readToEnd.startsWith("Cobra ")
			
			p = binding._spawnCobraCompilerProcess("cobra", "", ".")
			stdOut = p.standardOutput.readToEnd
			assert stdOut.contains("The Cobra Programming Language")
			assert stdOut.contains("Usage:")
			assert stdOut.contains("cobra -h")
		body
			proc = System.Diagnostics.Process()
			# useShellExecute needs to be false so we can redirect output and hide the screen on Windows
			proc.startInfo.useShellExecute = false
			proc.startInfo.redirectStandardOutput = true
			proc.startInfo.redirectStandardError = true
			proc.startInfo.windowStyle = ProcessWindowStyle.Hidden
			proc.startInfo.createNoWindow = true
			
			proc.startInfo.fileName = cobraExe
			if _isWindows and proc.startInfo.fileName == "cobra"
				proc.startInfo.environmentVariables["PATH"] = Environment.getEnvironmentVariable("PATH")
				proc.startInfo.fileName += ".bat"
			proc.startInfo.arguments = cobraArgs
			proc.startInfo.workingDirectory = workingDir
			
			trace proc.startInfo.arguments

			proc.start
			proc.waitForExit
			
			return proc
	
	/#
	regex testing: http://regexhero.net/tester/
	or in MonoDevelop go to: Tools > Regex Toolkit...
	#/
	shared
		var compilerOutputRegex = Regex( _
			r"(?<fileName>[^\(]+)\((?<lineNum>\d+)(,(?<col>\d+))?\):(\s)+(?<msgType>error|warning):(\s)*(?<msg>[^\r]+)", _
			RegexOptions.Compiled)

	def _parseCompilerOutput(compilerOutput as List<of String>) as BuildResult
		"""
		Parses the error and warning messages generated by the Cobra compiler and turns
		them into objects MonoDevelop can understand.
		"""
		test successfulCompilation
			sampleOutput = List<of String>()
			sampleOutput.add("Compilation succeeded")
			
			res = CobraLanguageBinding()._parseCompilerOutput(sampleOutput)
			assert res.errors.count == 0
			assert res.errorCount == 0
			assert res.warningCount == 0
		
		test successWithWarnings
			sampleOutput = List<of String>()
			sampleOutput.add("someFile.cobra(24): warning: Unnecessary parentheses. You can remove them.")
			sampleOutput.add('someFile.cobra(51): warning: The value of variable "someVar" is never used.')
			sampleOutput.add("Compilation succeeded - 2 warnings")
			
			res = CobraLanguageBinding()._parseCompilerOutput(sampleOutput)
			assert res.errors.count == 2
			assert res.errorCount == 0
			assert res.warningCount == 2
			lineSum = 0
			for w in res.errors
				assert w.isWarning
				assert w.fileName == "someFile.cobra"
				lineSum += w.line
				assert w.column == 0
				assert w.errorText == "Unnecessary parentheses. You can remove them." _
					or w.errorText == 'The value of variable "someVar" is never used.'
			assert lineSum == 75
			
		test lineColumnInfo
			sampleOutput = List<of String>()
			sampleOutput.add('foo.cobra(4): error: Cannot find "b". There is a member named ".memberwiseClone" with a similar name.')
			sampleOutput.add('foo.cobra(4): warning: The value of variable "a" is never used.')
			sampleOutput.add("foo.cobra(4,15): error: Expecting an expression.")
			
			res = CobraLanguageBinding()._parseCompilerOutput(sampleOutput)
			assert res.errors.count == 3
			assert res.errorCount == 2
			assert res.warningCount == 1
			for e in res.errors
				assert e.fileName == "foo.cobra"
				assert e.line == 4
				try
					assert e.column == 0
					if e.isWarning
						assert e.errorText == 'The value of variable "a" is never used.'
					else
						assert e.errorText == 'Cannot find "b". There is a member named ".memberwiseClone" with a similar name.'
				catch
					assert e.column == 15
					assert e.errorText == "Expecting an expression."
		
		test generalError
			sampleOutput = List<of String>()
			sampleOutput.add('error: Cannot find a "main" method.')
			sampleOutput.add("Compilation failed - 1 error, 0 warnings")
			sampleOutput.add("Not running due to errors above.")
			
			res = CobraLanguageBinding()._parseCompilerOutput(sampleOutput)
			assert res.errors.count == 1
			assert res.errorCount == 1
			assert res.warningCount == 0
			e = res.errors[0]
			assert not e.isWarning
			assert e.fileName == nil
			assert e.line == 0
			assert e.column == 0
			assert e.errorText == 'error: Cannot find a "main" method.'
		
		body
			buildResult = BuildResult()
			
			for line in compilerOutput
				match = CobraLanguageBinding.compilerOutputRegex.match(line)
				if match.success
					groups = match.groups
					fileName = groups["fileName"].toString
					lineNum = int.parse(groups["lineNum"].toString)
					col = 0
					if not int.tryParse(groups["col"].toString, out col)
						col = 0
					msgType = groups["msgType"].toString
					msg = groups["msg"].toString
					errNum = ""

					if msgType == "error"
						buildResult.addError(fileName, lineNum, col, errNum, msg)
					else
						buildResult.addWarning(fileName, lineNum, col, errNum, msg)

				else if line.contains("error:")
					buildResult.addError(line)
				else if line.contains("warning:")
					buildResult.addWarning(line)

			return buildResult

	def createCompilationParameters(projectOptions as XmlElement?) as ConfigurationParameters
		test
			binding = CobraLanguageBinding()
			compilerParams = binding.createCompilationParameters(nil)
			assert compilerParams.getType == CobraCompilerParameters
			assert (compilerParams to CobraCompilerParameters).performanceQualityOption == _
					CobraCompilerParameters.PerfQualOption.Default
		body
			return CobraCompilerParameters()
		
	def createProjectParameters(projectOptions as XmlElement?) as ProjectParameters
		test
			pass
		body
			return ProjectParameters()
	
	#TODO
	def getCodeDomProvider as CodeDomProvider?
		test
			pass
		body
			return nil
